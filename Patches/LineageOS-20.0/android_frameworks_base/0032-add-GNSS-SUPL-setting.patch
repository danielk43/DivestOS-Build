From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dmitry Muhomor <muhomor.dmitry@gmail.com>
Date: Fri, 10 Feb 2023 12:54:21 +0200
Subject: [PATCH] add GNSS SUPL setting

---
 .../android/ext/settings/ExtSettings.java     |  41 +++++
 .../android/ext/settings/GnssConstants.java   |   8 +
 .../java/android/ext/settings/IntSetting.java | 107 +++++++++++
 core/java/android/ext/settings/Setting.java   | 166 ++++++++++++++++++
 core/java/android/provider/Settings.java      |  13 ++
 .../location/gnss/GnssConfiguration.java      |  25 +++
 .../location/gnss/GnssLocationProvider.java   |  11 ++
 7 files changed, 371 insertions(+)
 create mode 100644 core/java/android/ext/settings/ExtSettings.java
 create mode 100644 core/java/android/ext/settings/GnssConstants.java
 create mode 100644 core/java/android/ext/settings/IntSetting.java
 create mode 100644 core/java/android/ext/settings/Setting.java

diff --git a/core/java/android/ext/settings/ExtSettings.java b/core/java/android/ext/settings/ExtSettings.java
new file mode 100644
index 000000000000..5da47c5af17c
--- /dev/null
+++ b/core/java/android/ext/settings/ExtSettings.java
@@ -0,0 +1,41 @@
+package android.ext.settings;
+
+import java.lang.reflect.Field;
+import java.util.Set;
+
+import static android.ext.settings.GnssConstants.SUPL_DISABLED;
+import static android.ext.settings.GnssConstants.SUPL_SERVER_GRAPHENEOS_PROXY;
+import static android.ext.settings.GnssConstants.SUPL_SERVER_STANDARD;
+
+/** @hide */
+public class ExtSettings {
+
+    public static final IntSetting GNSS_SUPL = new IntSetting(
+            Setting.Scope.GLOBAL, "force_disable_supl", // historical name
+            SUPL_SERVER_GRAPHENEOS_PROXY, // default
+            SUPL_SERVER_STANDARD, SUPL_DISABLED, SUPL_SERVER_GRAPHENEOS_PROXY // valid values
+    );
+
+    private ExtSettings() {}
+
+    // used for making settings defined in this class unreadable by third-party apps
+    public static void getKeys(Setting.Scope scope, Set<String> dest) {
+        for (Field field : ExtSettings.class.getDeclaredFields()) {
+            if (!Setting.class.isAssignableFrom(field.getType())) {
+                continue;
+            }
+            Setting s;
+            try {
+                s = (Setting) field.get(null);
+            } catch (IllegalAccessException e) {
+                throw new IllegalStateException(e);
+            }
+
+            if (s.getScope() == scope) {
+                if (!dest.add(s.getKey())) {
+                    throw new IllegalStateException("duplicate definition of setting " + s.getKey());
+                }
+            }
+        }
+    }
+}
diff --git a/core/java/android/ext/settings/GnssConstants.java b/core/java/android/ext/settings/GnssConstants.java
new file mode 100644
index 000000000000..fc945ee60c45
--- /dev/null
+++ b/core/java/android/ext/settings/GnssConstants.java
@@ -0,0 +1,8 @@
+package android.ext.settings;
+
+/** @hide */
+public interface GnssConstants {
+    int SUPL_SERVER_STANDARD = 0;
+    int SUPL_DISABLED = 1;
+    int SUPL_SERVER_GRAPHENEOS_PROXY = 2;
+}
diff --git a/core/java/android/ext/settings/IntSetting.java b/core/java/android/ext/settings/IntSetting.java
new file mode 100644
index 000000000000..8db6fbf16884
--- /dev/null
+++ b/core/java/android/ext/settings/IntSetting.java
@@ -0,0 +1,107 @@
+/*
+ * Copyright (C) 2022 GrapheneOS
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+package android.ext.settings;
+
+import android.annotation.Nullable;
+import android.content.Context;
+
+import java.util.function.IntSupplier;
+
+/** @hide */
+public class IntSetting extends Setting<IntSetting> {
+    private int defaultValue;
+    private volatile IntSupplier defaultValueSupplier;
+
+    @Nullable private final int[] validValues;
+
+    private IntSetting(Scope scope, String key, @Nullable int[] validValues) {
+        super(scope, key);
+        this.validValues = validValues;
+    }
+
+    public IntSetting(Scope scope, String key, int defaultValue) {
+        this(scope, key, (int[]) null);
+        setDefaultValue(defaultValue);
+    }
+
+    public IntSetting(Scope scope, String key, int defaultValue, int... validValues) {
+        this(scope, key, validValues);
+        setDefaultValue(defaultValue);
+    }
+
+    public IntSetting(Scope scope, String key, IntSupplier defaultValue) {
+        this(scope, key, (int[]) null);
+        defaultValueSupplier = defaultValue;
+    }
+
+    public IntSetting(Scope scope, String key, IntSupplier defaultValue, int... validValues) {
+        this(scope, key, validValues);
+        defaultValueSupplier = defaultValue;
+    }
+
+    public boolean validateValue(int val) {
+        if (validValues == null) {
+            return true;
+        }
+        // don't do sort() + bsearch() of validValues array, it's expected to have a small number of entries
+        for (int validValue : validValues) {
+            if (val == validValue) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    public final int get(Context ctx) {
+        return get(ctx, ctx.getUserId());
+    }
+
+    // use only if this is a per-user setting and the context is not a per-user one
+    public final int get(Context ctx, int userId) {
+        String valueStr = getRaw(ctx, userId);
+
+        if (valueStr == null) {
+            return getDefaultValue();
+        }
+
+        int value;
+        try {
+            value = Integer.parseInt(valueStr);
+        } catch (NumberFormatException e) {
+            e.printStackTrace();
+            return getDefaultValue();
+        }
+
+        if (!validateValue(value)) {
+            return getDefaultValue();
+        }
+
+        return value;
+    }
+
+    public final boolean put(Context ctx, int val) {
+        if (!validateValue(val)) {
+            throw new IllegalArgumentException(Integer.toString(val));
+        }
+        return putRaw(ctx, Integer.toString(val));
+    }
+
+    private void setDefaultValue(int val) {
+        if (!validateValue(val)) {
+            throw new IllegalStateException("invalid default value " + val);
+        }
+        defaultValue = val;
+    }
+
+    private int getDefaultValue() {
+        IntSupplier supplier = defaultValueSupplier;
+        if (supplier != null) {
+            setDefaultValue(supplier.getAsInt());
+            defaultValueSupplier = null;
+        }
+        return defaultValue;
+    }
+}
diff --git a/core/java/android/ext/settings/Setting.java b/core/java/android/ext/settings/Setting.java
new file mode 100644
index 000000000000..7c9e7b2a6d21
--- /dev/null
+++ b/core/java/android/ext/settings/Setting.java
@@ -0,0 +1,166 @@
+/*
+ * Copyright (C) 2022 GrapheneOS
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+package android.ext.settings;
+
+import android.annotation.Nullable;
+import android.content.Context;
+import android.database.ContentObserver;
+import android.net.Uri;
+import android.os.Handler;
+import android.os.SystemProperties;
+import android.provider.Settings;
+
+import java.util.function.Consumer;
+
+/** @hide */
+public abstract class Setting<SelfType extends Setting> {
+
+    public enum Scope {
+        SYSTEM_PROPERTY, // android.os.SystemProperties, doesn't support state observers
+        GLOBAL, // android.provider.Settings.Global
+        PER_USER, // android.provider.Settings.Secure
+    }
+
+    private final Scope scope;
+    private final String key;
+
+    protected Setting(Scope scope, String key) {
+        this.scope = scope;
+        this.key = key;
+    }
+
+    public final String getKey() {
+        return key;
+    }
+
+    public final Scope getScope() {
+        return scope;
+    }
+
+    @Nullable
+    protected final String getRaw(Context ctx, int userId) {
+        try {
+            switch (scope) {
+                case SYSTEM_PROPERTY: {
+                    String s = SystemProperties.get(key);
+                    if (s.isEmpty()) {
+                        return null;
+                    }
+                    return s;
+                }
+                case GLOBAL:
+                    return Settings.Global.getString(ctx.getContentResolver(), key);
+                case PER_USER:
+                    return Settings.Secure.getStringForUser(ctx.getContentResolver(), key, userId);
+            }
+        } catch (Throwable e) {
+            e.printStackTrace();
+            if (Settings.isInSystemServer()) {
+                // should never happen under normal circumstances, but if it does,
+                // don't crash the system_server
+                return null;
+            }
+
+            throw e;
+        }
+
+        // "switch (scope)" above should be exhaustive
+        throw new IllegalStateException();
+    }
+
+    protected final boolean putRaw(Context ctx, String val) {
+        switch (scope) {
+            case SYSTEM_PROPERTY: {
+                try {
+                    SystemProperties.set(key, val);
+                    return true;
+                } catch (RuntimeException e) {
+                    e.printStackTrace();
+                    if (e instanceof IllegalArgumentException) {
+                        // see doc
+                        throw e;
+                    }
+                    return false;
+                }
+            }
+            case GLOBAL:
+                return Settings.Global.putString(ctx.getContentResolver(), key, val);
+            case PER_USER:
+                return Settings.Secure.putString(ctx.getContentResolver(), key, val);
+            default:
+                throw new IllegalStateException();
+        }
+    }
+
+    public final boolean canObserveState() {
+        return scope != Scope.SYSTEM_PROPERTY;
+    }
+
+    // pass the return value to unregisterObserver() to remove the observer
+    public final Object registerObserver(Context ctx, Consumer<SelfType> callback, Handler handler) {
+        return registerObserver(ctx, ctx.getUserId(), callback, handler);
+    }
+
+    public final Object registerObserver(Context ctx, int userId, Consumer<SelfType> callback, Handler handler) {
+        if (scope == Scope.SYSTEM_PROPERTY) {
+            // SystemProperties.addChangeCallback() doesn't work unless the change is actually
+            // reported elsewhere in the same process with SystemProperties.callChangeCallbacks()
+            // or with its native equivalent (report_sysprop_change()).
+            // Leave the code in place in case this changes in the future.
+            if (false) {
+                Runnable observer = new Runnable() {
+                    private volatile String prev = SystemProperties.get(getKey());
+
+                    @Override
+                    public void run() {
+                        String value = SystemProperties.get(getKey());
+                        // change callback is dispatched whenever any change to system props occurs
+                        if (!prev.equals(value)) {
+                            prev = value;
+                            handler.post(() -> callback.accept((SelfType) Setting.this));
+                        }
+                    }
+                };
+                SystemProperties.addChangeCallback(observer);
+                return observer;
+            }
+            throw new UnsupportedOperationException("observing sysprop state is not supported");
+        }
+
+        Uri uri;
+        switch (scope) {
+            case GLOBAL:
+                uri = Settings.Global.getUriFor(key);
+                break;
+            case PER_USER:
+                uri = Settings.Secure.getUriFor(key);
+                break;
+            default:
+                throw new IllegalStateException();
+        }
+
+        ContentObserver observer = new ContentObserver(handler) {
+            @Override
+            public void onChange(boolean selfChange) {
+                callback.accept((SelfType) Setting.this);
+            }
+        };
+        ctx.getContentResolver().registerContentObserver(uri, false, observer, userId);
+
+        return observer;
+    }
+
+    public final void unregisterObserver(Context ctx, Object observer) {
+        if (scope == Scope.SYSTEM_PROPERTY) {
+            if (false) { // see comment in registerObserverInner
+                SystemProperties.removeChangeCallback((Runnable) observer);
+            }
+            throw new UnsupportedOperationException("observing sysprop state is not supported");
+        } else {
+            ctx.getContentResolver().unregisterContentObserver((ContentObserver) observer);
+        }
+    }
+}
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index e12274516a55..a2461347789b 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -51,6 +51,8 @@ import android.content.pm.ResolveInfo;
 import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.database.Cursor;
+import android.ext.settings.ExtSettings;
+import android.ext.settings.Setting;
 import android.database.SQLException;
 import android.location.ILocationManager;
 import android.location.LocationManager;
@@ -3501,6 +3503,17 @@ public final class Settings {
                     }
                 }
             }
+
+            Setting.Scope extSettingsScope = null;
+            if (callerClass == Global.class) {
+                extSettingsScope = Setting.Scope.GLOBAL;
+            } else if (callerClass == Secure.class) {
+                extSettingsScope = Setting.Scope.PER_USER;
+            }
+
+            if (extSettingsScope != null) {
+                ExtSettings.getKeys(extSettingsScope, allKeys);
+            }
         } catch (IllegalAccessException ignored) {
         }
     }
diff --git a/services/core/java/com/android/server/location/gnss/GnssConfiguration.java b/services/core/java/com/android/server/location/gnss/GnssConfiguration.java
index 1435016fc55a..0ab7c80ad85e 100644
--- a/services/core/java/com/android/server/location/gnss/GnssConfiguration.java
+++ b/services/core/java/com/android/server/location/gnss/GnssConfiguration.java
@@ -17,13 +17,17 @@
 package com.android.server.location.gnss;
 
 import android.content.Context;
+import android.ext.settings.ExtSettings;
+import android.ext.settings.GnssConstants;
 import android.os.PersistableBundle;
 import android.os.SystemProperties;
+import android.provider.Settings;
 import android.telephony.CarrierConfigManager;
 import android.telephony.SubscriptionManager;
 import android.telephony.TelephonyManager;
 import android.text.TextUtils;
 import android.util.Log;
+import android.util.Slog;
 
 import com.android.internal.util.FrameworkStatsLog;
 
@@ -276,6 +280,8 @@ public class GnssConfiguration {
         loadPropertiesFromGpsDebugConfig(mProperties);
         mEsExtensionSec = getRangeCheckedConfigEsExtensionSec();
 
+        applyConfigOverrides(mContext, mProperties);
+
         logConfigurations();
 
         final HalInterfaceVersion gnssConfigurationIfaceVersion = getHalInterfaceVersion();
@@ -476,4 +482,23 @@ public class GnssConfiguration {
     private static native boolean native_set_satellite_blocklist(int[] constellations, int[] svIds);
 
     private static native boolean native_set_es_extension_sec(int emergencyExtensionSeconds);
+
+    private static void applyConfigOverrides(Context ctx, Properties props) {
+        final int suplMode = ExtSettings.GNSS_SUPL.get(ctx);
+
+        switch (suplMode) {
+            case GnssConstants.SUPL_SERVER_STANDARD:
+                Slog.d(TAG, "SUPL: using the standard server");
+                break;
+            case GnssConstants.SUPL_DISABLED:
+                Slog.d(TAG, "SUPL is disabled");
+                props.setProperty(CONFIG_SUPL_MODE, "0");
+                break;
+            case GnssConstants.SUPL_SERVER_GRAPHENEOS_PROXY:
+                Slog.d(TAG, "SUPL: using the GrapheneOS proxy");
+                props.setProperty(CONFIG_SUPL_HOST, "supl.grapheneos.org");
+                props.setProperty(CONFIG_SUPL_PORT, "7275");
+                break;
+        }
+    }
 }
diff --git a/services/core/java/com/android/server/location/gnss/GnssLocationProvider.java b/services/core/java/com/android/server/location/gnss/GnssLocationProvider.java
index 6ddd57c1ff11..91687ebfde4b 100644
--- a/services/core/java/com/android/server/location/gnss/GnssLocationProvider.java
+++ b/services/core/java/com/android/server/location/gnss/GnssLocationProvider.java
@@ -60,6 +60,8 @@ import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.pm.PackageManager;
 import android.database.ContentObserver;
+import android.ext.settings.ExtSettings;
+import android.ext.settings.IntSetting;
 import android.location.GnssCapabilities;
 import android.location.GnssStatus;
 import android.location.INetInitiatedListener;
@@ -100,6 +102,7 @@ import android.telephony.TelephonyManager;
 import android.text.TextUtils;
 import android.text.format.DateUtils;
 import android.util.Log;
+import android.util.Slog;
 import android.util.TimeUtils;
 
 import com.android.internal.annotations.GuardedBy;
@@ -127,6 +130,7 @@ import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
+import java.util.function.Consumer;
 
 /**
  * A GNSS implementation of LocationProvider used by LocationManager.
@@ -481,6 +485,13 @@ public class GnssLocationProvider extends AbstractLocationProvider implements
         mGnssNative.setNotificationCallbacks(this);
         mGnssNative.setLocationRequestCallbacks(this);
         mGnssNative.setTimeCallbacks(this);
+
+        Consumer<IntSetting> suplSettingObserver = setting -> {
+            Slog.d(TAG, "SUPL setting changed, value: " + setting.get(mContext));
+            reloadGpsProperties();
+        };
+
+        ExtSettings.GNSS_SUPL.registerObserver(mContext, suplSettingObserver, mHandler);
     }
 
     /** Called when system is ready. */
